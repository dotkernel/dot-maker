{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dot-maker Programmatically generate Dotkernel project files and directories. Documentation Documentation is available at: https://docs.dotkernel.org/dot-maker/. Badges Installation Run the following command in your terminal: composer require-dev dotkernel/dot-maker Setup Once installed, dot-maker is ready for usage, no need for extra configurations. (Optional) Add dot-maker to composer.json Open your project's composer.json and locate the scripts section. If it does not exist, create it at the document's root level. Register a new script by appending \"alias\": \"dot-maker\" to the scripts section, where alias can be any string you want; like, for example, make . { \"scripts\": { \"make\": \"dot-maker\" } } Usage Invoke dot-maker by executing: the bin file in your vendor directory ./vendor/bin/dot-maker the (optional) Composer script created during Setup : composer make Follow the instructions on the screen to create a specific Dotkernel project component.","title":"Home"},{"location":"#dot-maker","text":"Programmatically generate Dotkernel project files and directories.","title":"dot-maker"},{"location":"#documentation","text":"Documentation is available at: https://docs.dotkernel.org/dot-maker/.","title":"Documentation"},{"location":"#badges","text":"","title":"Badges"},{"location":"#installation","text":"Run the following command in your terminal: composer require-dev dotkernel/dot-maker","title":"Installation"},{"location":"#setup","text":"Once installed, dot-maker is ready for usage, no need for extra configurations.","title":"Setup"},{"location":"#usage","text":"Invoke dot-maker by executing: the bin file in your vendor directory ./vendor/bin/dot-maker the (optional) Composer script created during Setup : composer make Follow the instructions on the screen to create a specific Dotkernel project component.","title":"Usage"},{"location":"v1/installation/","text":"Installation Install dotkernel/dot-maker by executing the following Composer command: composer require-dev dotkernel/dot-maker","title":"Installation"},{"location":"v1/installation/#installation","text":"Install dotkernel/dot-maker by executing the following Composer command: composer require-dev dotkernel/dot-maker","title":"Installation"},{"location":"v1/naming-standards/","text":"Naming Standards Inside the Dotkernel ecosystem, we strictly follow the following standards to make sure that we provide clean and easy-to-follow code: PSR-4 : the autoloading standard—for easy autoloading of classes. PSR-12 : the extended coding style—for suggestive file names. Collections Can only be created in API projects. These are files that are used to contain a set of resources of the same type. location: src/&lt;ModuleName&gt;/src/Collection pattern: Name + Collection example: src/&lt;ModuleName&gt;/src/Collection/ExampleCollection.php Commands These are CLI scripts that are used to perform a specific task. location: src/&lt;ModuleName&gt;/src/Command pattern: Name + Command example: src/&lt;ModuleName&gt;/src/Command/ExampleCommand.php Core-compatible projects MAY also have Core Commands: location: src/Core/src/&lt;ModuleName&gt;/src/Command pattern: Name + Command example: src/Core/src/&lt;ModuleName&gt;/src/Command/ExampleCommand.php ConfigProvider These are configuration classes where aliases, delegators, factories and template paths are registered. location: src/&lt;ModuleName&gt;/src pattern: ConfigProvider example: src/&lt;ModuleName&gt;/src/ConfigProvider.php Core-compatible projects also have a Core ConfigProvider: location: src/Core/src/&lt;ModuleName&gt;/src pattern: ConfigProvider example: src/Core/src/&lt;ModuleName&gt;/src/ConfigProvider.php When this file exists, Doctrine entity configurations are stored here. Else, those too are stored in src/&lt;ModuleName&gt;/src/ConfigProvider.php . Entities These are classes that represent a single resource and are used to store and retrieve data in a database. location: src/Core/src/ModuleName/Entity pattern: Name example: src/Core/src/ModuleName/Entity/Example.php Legacy projects location: src/&lt;ModuleName&gt;/src/Entity pattern: Name example: src/&lt;ModuleName&gt;/src/Entity/Example.php Factories These are classes responsible for instantiating specific objects. location: src/&lt;ModuleName&gt;/src/Factory pattern: Name + Factory example: src/&lt;ModuleName&gt;/src/Factory/ExampleFactory.php Core-compatible projects MAY also have Core Factories: location: src/Core/src/&lt;ModuleName&gt;/src/Factory pattern: Name + Factory example: src/Core/src/&lt;ModuleName&gt;/src/Factory/ExampleFactory.php Fixtures These are classes used to populate the database with test data. location: src/Core/src/App/src/Fixture pattern: Name + Loader example: src/Core/src/App/src/Fixture/ExampleLoader.php Forms Cannot be created in API projects. These are objectual representations of an HTML form. location: src/&lt;ModuleName&gt;/src/Form pattern: Name + Form example: src/&lt;ModuleName&gt;/src/Form/ExampleForm.php Handlers These are classes responsible for handling a specific HTTP request. location: src/&lt;ModuleName&gt;/src/Handler/&lt;ResourceName&gt; pattern: Verb + Name + Action + Handler example: src/&lt;ModuleName&gt;/src/Handler/&lt;ResourceName&gt;Post&lt;ResourceName&gt;CreateHandler.php API projects location: src/&lt;ModuleName&gt;/src/Handler/&lt;ResourceName&gt; pattern: resources: Verb + Name + ResourceHandler collections: Verb + Name + CollectionHandler example: resources: src/&lt;ModuleName&gt;/src/Handler/&lt;ResourceName&gt;/Create&lt;ResourceName&gt;ResourceHandler.php collections: src/&lt;ModuleName&gt;/src/Handler/&lt;ResourceName&gt;/Get&lt;ResourceName&gt;CollectionHandler.php Inputs These are objectual representations of an HTML form input. location: src/&lt;ModuleName&gt;/src/InputFilter/Input pattern: Name + Input example: src/&lt;ModuleName&gt;/src/InputFilter/Input/ExampleInput.php Core-compatible projects MAY also have Core Inputs: location: src/Core/src/&lt;ModuleName&gt;/src/InputFilter/Input pattern: Name + Input example: src/Core/src/&lt;ModuleName&gt;/src/InputFilter/Input/ExampleInput.php InputFilters These are classes that are used to validate and filter form data. location: src/&lt;ModuleName&gt;/src/InputFilter pattern: Name + InputFilter example: src/&lt;ModuleName&gt;/src/InputFilter/ExampleInputFilter.php Core-compatible projects MAY also have Core InputFilters: location: src/Core/src/&lt;ModuleName&gt;/src/InputFilter pattern: Name + InputFilter example: src/Core/src/&lt;ModuleName&gt;/src/InputFilter/ExampleInputFilter.php Middleware These are classes that can be used to perform actions before and after a request has been handled. location: src/&lt;ModuleName&gt;/src/Middleware pattern: Name + Middleware example: src/&lt;ModuleName&gt;/src/Middleware/ExampleMiddleware.php Core-compatible projects MAY also have Core Middleware: location: src/Core/src/&lt;ModuleName&gt;/src/Middleware pattern: Name + Middleware example: src/Core/src/&lt;ModuleName&gt;/src/Middleware/ExampleMiddleware.php Migrations These are classes used to modify the database schema. location: src/Core/src/App/src/Migration pattern: Version + Timestamp example: src/Core/src/App/src/Migration/Version20250407142911.php OpenApi Can only be created in API projects. These are configuration classes where OpenApi specifications are registered. location: src/&lt;ModuleName&gt;/src pattern: OpenApi example: src/&lt;ModuleName&gt;/src/OpenApi.php Repositories These are classes that represent an intermediary layer between the database and the entities. location: src/Core/src/ModuleName/Repository pattern: Name + Repository example: src/Core/src/ModuleName/Repository/ExampleRepository.php Legacy projects location: src/&lt;ModuleName&gt;/src/Repository pattern: Name + Repository example: src/&lt;ModuleName&gt;/src/Repository/ExampleRepository.php RoutesDelegator These are configuration classes where HTTP request routes are registered. location: src/&lt;ModuleName&gt;/src pattern: RoutesDelegator example: src/&lt;ModuleName&gt;/src/RoutesDelegator.php Services These are classes that contain task-specific methods to be reused across the application. location: src/&lt;ModuleName&gt;/src/Service pattern: Name + Service example: src/&lt;ModuleName&gt;/src/Service/ExampleService.php Core-compatible projects MAY also have Core Services: location: src/Core/src/&lt;ModuleName&gt;/src/Service pattern: Name + Service example: src/Core/src/&lt;ModuleName&gt;/src/Service/ExampleService.php ServiceInterfaces These are interfaces that serve as contracts for services. location: src/&lt;ModuleName&gt;/src/ServiceInterface pattern: Name + ServiceInterface example: src/&lt;ModuleName&gt;/src/Service/ExampleServiceInterface.php Core-compatible projects MAY also have Core ServiceInterfaces: location: src/Core/src/&lt;ModuleName&gt;/src/Service pattern: Name + Service example: src/Core/src/&lt;ModuleName&gt;/src/Service/ExampleServiceInterface.php","title":"Naming Standards"},{"location":"v1/naming-standards/#naming-standards","text":"Inside the Dotkernel ecosystem, we strictly follow the following standards to make sure that we provide clean and easy-to-follow code: PSR-4 : the autoloading standard—for easy autoloading of classes. PSR-12 : the extended coding style—for suggestive file names.","title":"Naming Standards"},{"location":"v1/naming-standards/#collections","text":"Can only be created in API projects. These are files that are used to contain a set of resources of the same type. location: src/&lt;ModuleName&gt;/src/Collection pattern: Name + Collection example: src/&lt;ModuleName&gt;/src/Collection/ExampleCollection.php","title":"Collections"},{"location":"v1/naming-standards/#commands","text":"These are CLI scripts that are used to perform a specific task. location: src/&lt;ModuleName&gt;/src/Command pattern: Name + Command example: src/&lt;ModuleName&gt;/src/Command/ExampleCommand.php Core-compatible projects MAY also have Core Commands: location: src/Core/src/&lt;ModuleName&gt;/src/Command pattern: Name + Command example: src/Core/src/&lt;ModuleName&gt;/src/Command/ExampleCommand.php","title":"Commands"},{"location":"v1/naming-standards/#configprovider","text":"These are configuration classes where aliases, delegators, factories and template paths are registered. location: src/&lt;ModuleName&gt;/src pattern: ConfigProvider example: src/&lt;ModuleName&gt;/src/ConfigProvider.php Core-compatible projects also have a Core ConfigProvider: location: src/Core/src/&lt;ModuleName&gt;/src pattern: ConfigProvider example: src/Core/src/&lt;ModuleName&gt;/src/ConfigProvider.php When this file exists, Doctrine entity configurations are stored here. Else, those too are stored in src/&lt;ModuleName&gt;/src/ConfigProvider.php .","title":"ConfigProvider"},{"location":"v1/naming-standards/#entities","text":"These are classes that represent a single resource and are used to store and retrieve data in a database. location: src/Core/src/ModuleName/Entity pattern: Name example: src/Core/src/ModuleName/Entity/Example.php","title":"Entities"},{"location":"v1/naming-standards/#factories","text":"These are classes responsible for instantiating specific objects. location: src/&lt;ModuleName&gt;/src/Factory pattern: Name + Factory example: src/&lt;ModuleName&gt;/src/Factory/ExampleFactory.php Core-compatible projects MAY also have Core Factories: location: src/Core/src/&lt;ModuleName&gt;/src/Factory pattern: Name + Factory example: src/Core/src/&lt;ModuleName&gt;/src/Factory/ExampleFactory.php","title":"Factories"},{"location":"v1/naming-standards/#fixtures","text":"These are classes used to populate the database with test data. location: src/Core/src/App/src/Fixture pattern: Name + Loader example: src/Core/src/App/src/Fixture/ExampleLoader.php","title":"Fixtures"},{"location":"v1/naming-standards/#forms","text":"Cannot be created in API projects. These are objectual representations of an HTML form. location: src/&lt;ModuleName&gt;/src/Form pattern: Name + Form example: src/&lt;ModuleName&gt;/src/Form/ExampleForm.php","title":"Forms"},{"location":"v1/naming-standards/#handlers","text":"These are classes responsible for handling a specific HTTP request. location: src/&lt;ModuleName&gt;/src/Handler/&lt;ResourceName&gt; pattern: Verb + Name + Action + Handler example: src/&lt;ModuleName&gt;/src/Handler/&lt;ResourceName&gt;Post&lt;ResourceName&gt;CreateHandler.php","title":"Handlers"},{"location":"v1/naming-standards/#inputs","text":"These are objectual representations of an HTML form input. location: src/&lt;ModuleName&gt;/src/InputFilter/Input pattern: Name + Input example: src/&lt;ModuleName&gt;/src/InputFilter/Input/ExampleInput.php Core-compatible projects MAY also have Core Inputs: location: src/Core/src/&lt;ModuleName&gt;/src/InputFilter/Input pattern: Name + Input example: src/Core/src/&lt;ModuleName&gt;/src/InputFilter/Input/ExampleInput.php","title":"Inputs"},{"location":"v1/naming-standards/#inputfilters","text":"These are classes that are used to validate and filter form data. location: src/&lt;ModuleName&gt;/src/InputFilter pattern: Name + InputFilter example: src/&lt;ModuleName&gt;/src/InputFilter/ExampleInputFilter.php Core-compatible projects MAY also have Core InputFilters: location: src/Core/src/&lt;ModuleName&gt;/src/InputFilter pattern: Name + InputFilter example: src/Core/src/&lt;ModuleName&gt;/src/InputFilter/ExampleInputFilter.php","title":"InputFilters"},{"location":"v1/naming-standards/#middleware","text":"These are classes that can be used to perform actions before and after a request has been handled. location: src/&lt;ModuleName&gt;/src/Middleware pattern: Name + Middleware example: src/&lt;ModuleName&gt;/src/Middleware/ExampleMiddleware.php Core-compatible projects MAY also have Core Middleware: location: src/Core/src/&lt;ModuleName&gt;/src/Middleware pattern: Name + Middleware example: src/Core/src/&lt;ModuleName&gt;/src/Middleware/ExampleMiddleware.php","title":"Middleware"},{"location":"v1/naming-standards/#migrations","text":"These are classes used to modify the database schema. location: src/Core/src/App/src/Migration pattern: Version + Timestamp example: src/Core/src/App/src/Migration/Version20250407142911.php","title":"Migrations"},{"location":"v1/naming-standards/#openapi","text":"Can only be created in API projects. These are configuration classes where OpenApi specifications are registered. location: src/&lt;ModuleName&gt;/src pattern: OpenApi example: src/&lt;ModuleName&gt;/src/OpenApi.php","title":"OpenApi"},{"location":"v1/naming-standards/#repositories","text":"These are classes that represent an intermediary layer between the database and the entities. location: src/Core/src/ModuleName/Repository pattern: Name + Repository example: src/Core/src/ModuleName/Repository/ExampleRepository.php","title":"Repositories"},{"location":"v1/naming-standards/#routesdelegator","text":"These are configuration classes where HTTP request routes are registered. location: src/&lt;ModuleName&gt;/src pattern: RoutesDelegator example: src/&lt;ModuleName&gt;/src/RoutesDelegator.php","title":"RoutesDelegator"},{"location":"v1/naming-standards/#services","text":"These are classes that contain task-specific methods to be reused across the application. location: src/&lt;ModuleName&gt;/src/Service pattern: Name + Service example: src/&lt;ModuleName&gt;/src/Service/ExampleService.php Core-compatible projects MAY also have Core Services: location: src/Core/src/&lt;ModuleName&gt;/src/Service pattern: Name + Service example: src/Core/src/&lt;ModuleName&gt;/src/Service/ExampleService.php","title":"Services"},{"location":"v1/naming-standards/#serviceinterfaces","text":"These are interfaces that serve as contracts for services. location: src/&lt;ModuleName&gt;/src/ServiceInterface pattern: Name + ServiceInterface example: src/&lt;ModuleName&gt;/src/Service/ExampleServiceInterface.php Core-compatible projects MAY also have Core ServiceInterfaces: location: src/Core/src/&lt;ModuleName&gt;/src/Service pattern: Name + Service example: src/Core/src/&lt;ModuleName&gt;/src/Service/ExampleServiceInterface.php","title":"ServiceInterfaces"},{"location":"v1/overview/","text":"Overview Programmatically generate Dotkernel project files and directories. Badges Make sure you run through our guides on using the inputs and the outputs .","title":"Overview"},{"location":"v1/overview/#overview","text":"Programmatically generate Dotkernel project files and directories.","title":"Overview"},{"location":"v1/overview/#badges","text":"Make sure you run through our guides on using the inputs and the outputs .","title":"Badges"},{"location":"v1/setup/","text":"Setup Once installed, dot-maker is ready for usage, no need for extra configurations. Add dot-maker to composer.json This step is optional but recommended. Open your project's composer.json and locate the scripts section. If it does not exist, create it at the document's root level. Register a new script by appending \"alias\": \"dot-maker\" to the scripts section, where alias can be any string you want; like, for example, make . { \"scripts\": { \"make\": \"dot-maker\" } }","title":"Setup"},{"location":"v1/setup/#setup","text":"Once installed, dot-maker is ready for usage, no need for extra configurations.","title":"Setup"},{"location":"v1/setup/#add-dot-maker-to-composerjson","text":"This step is optional but recommended. Open your project's composer.json and locate the scripts section. If it does not exist, create it at the document's root level. Register a new script by appending \"alias\": \"dot-maker\" to the scripts section, where alias can be any string you want; like, for example, make . { \"scripts\": { \"make\": \"dot-maker\" } }","title":"Add dot-maker to composer.json"},{"location":"v1/usage/","text":"Usage Invoke dot-maker by executing: the bin file in your vendor directory ./vendor/bin/dot-maker the (optional) Composer script created during Setup : composer make Follow the instructions on the screen to create a specific Dotkernel project component.","title":"Usage"},{"location":"v1/usage/#usage","text":"Invoke dot-maker by executing: the bin file in your vendor directory ./vendor/bin/dot-maker the (optional) Composer script created during Setup : composer make Follow the instructions on the screen to create a specific Dotkernel project component.","title":"Usage"},{"location":"v1/component/collection/","text":"Create Collection This page assumes that you have created a Composer \"make\" script as described on the Setup page . Collections can be created only in APIs. Run the command To create a Collection, use either of the following commands: composer make collection OR ./vendor/bin/dot-maker collection Identify the target module dot-maker needs to know in which module you want to create the new Collection. To determine this, it will prompt you to enter the name of an existing module: Existing module name: If you input a module name which does not exist (like, \"NonExistentModule\"), an error will be thrown: Module \"NonExistentModule\" not found and will keep prompting for a valid module name until you provide one. Once an existing module name (like, \"ExistingModule\") is provided, dot-maker will output a success message: Found Module \"ExistingModule\" Name the Collection Once the target module has been identified, you will be prompted to input a name for the Collection: Collection name: The name must contain only letters and numbers. You don't have to append \"Collection\" to the name. It is automatically appended when necessary. See our Naming Standards page for more information. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid Collection name: \".\" If you input the name of an existing Collection (like, \"ExistingCollection\"), an error will be thrown: Class \"ExistingCollection\" already exists at /path/to/project/src/ExistingModule/src/Collection/ExistingCollection.php If you input a valid name (like, \"NewCollection\"), dot-maker will create the Collection and output a success message: Created Collection: /path/to/project/src/ExistingModule/src/Collection/NewCollection.php Create multiple Collections To allow the creation of multiple Collections, the process will loop until you leave the name blank. Each iteration creates a new Collection under the same module.","title":"Create Collection"},{"location":"v1/component/collection/#create-collection","text":"This page assumes that you have created a Composer \"make\" script as described on the Setup page . Collections can be created only in APIs.","title":"Create Collection"},{"location":"v1/component/collection/#run-the-command","text":"To create a Collection, use either of the following commands: composer make collection OR ./vendor/bin/dot-maker collection","title":"Run the command"},{"location":"v1/component/collection/#identify-the-target-module","text":"dot-maker needs to know in which module you want to create the new Collection. To determine this, it will prompt you to enter the name of an existing module: Existing module name: If you input a module name which does not exist (like, \"NonExistentModule\"), an error will be thrown: Module \"NonExistentModule\" not found and will keep prompting for a valid module name until you provide one. Once an existing module name (like, \"ExistingModule\") is provided, dot-maker will output a success message: Found Module \"ExistingModule\"","title":"Identify the target module"},{"location":"v1/component/collection/#name-the-collection","text":"Once the target module has been identified, you will be prompted to input a name for the Collection: Collection name: The name must contain only letters and numbers. You don't have to append \"Collection\" to the name. It is automatically appended when necessary. See our Naming Standards page for more information. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid Collection name: \".\" If you input the name of an existing Collection (like, \"ExistingCollection\"), an error will be thrown: Class \"ExistingCollection\" already exists at /path/to/project/src/ExistingModule/src/Collection/ExistingCollection.php If you input a valid name (like, \"NewCollection\"), dot-maker will create the Collection and output a success message: Created Collection: /path/to/project/src/ExistingModule/src/Collection/NewCollection.php","title":"Name the Collection"},{"location":"v1/component/collection/#create-multiple-collections","text":"To allow the creation of multiple Collections, the process will loop until you leave the name blank. Each iteration creates a new Collection under the same module.","title":"Create multiple Collections"},{"location":"v1/component/command/","text":"Create Command This page assumes that you have created a Composer \"make\" script as described on the Setup page . dot-maker will look for a matching ServiceInterface in the module (e.g.: BookServiceInterface — BookCommand). If it finds one, it will automatically inject it into the Command. To create a Command, use either of the following commands: Run the command composer make command OR ./vendor/bin/dot-maker command Identify the target module dot-maker needs to know in which module you want to create the new Command. To determine this, it will prompt you to enter the name of an existing module: Existing module name: If you input a module name which does not exist (like, \"NonExistentModule\"), an error will be thrown: Module \"NonExistentModule\" not found and will keep prompting for a valid module name until you provide one. Once an existing module name (like, \"ExistingModule\") is provided, dot-maker will output a success message: Found Module \"ExistingModule\" Name the Command Once the target module has been identified, you will be prompted to input a name for the Command: Command name: The name must contain only letters and numbers. You don't have to append \"Command\" to the name. It is automatically appended when necessary. See our Naming Standards page for more information. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid Command name: \".\" If you input the name of an existing Command (like, \"ExistingCommand\"), an error will be thrown: Class \"ExistingCommand\" already exists at /path/to/project/src/ExistingModule/src/Command/ExistingCommand.php If you input a valid name (like, \"NewCommand\"), dot-maker will create the Command and output a success message: Created Command: /path/to/project/src/ExistingModule/src/Command/NewCommand.php Create multiple Commands To allow the creation of multiple Commands, the process will loop until you leave the name blank. Each iteration creates a new Command under the same module.","title":"Create Command"},{"location":"v1/component/command/#create-command","text":"This page assumes that you have created a Composer \"make\" script as described on the Setup page . dot-maker will look for a matching ServiceInterface in the module (e.g.: BookServiceInterface — BookCommand). If it finds one, it will automatically inject it into the Command. To create a Command, use either of the following commands:","title":"Create Command"},{"location":"v1/component/command/#run-the-command","text":"composer make command OR ./vendor/bin/dot-maker command","title":"Run the command"},{"location":"v1/component/command/#identify-the-target-module","text":"dot-maker needs to know in which module you want to create the new Command. To determine this, it will prompt you to enter the name of an existing module: Existing module name: If you input a module name which does not exist (like, \"NonExistentModule\"), an error will be thrown: Module \"NonExistentModule\" not found and will keep prompting for a valid module name until you provide one. Once an existing module name (like, \"ExistingModule\") is provided, dot-maker will output a success message: Found Module \"ExistingModule\"","title":"Identify the target module"},{"location":"v1/component/command/#name-the-command","text":"Once the target module has been identified, you will be prompted to input a name for the Command: Command name: The name must contain only letters and numbers. You don't have to append \"Command\" to the name. It is automatically appended when necessary. See our Naming Standards page for more information. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid Command name: \".\" If you input the name of an existing Command (like, \"ExistingCommand\"), an error will be thrown: Class \"ExistingCommand\" already exists at /path/to/project/src/ExistingModule/src/Command/ExistingCommand.php If you input a valid name (like, \"NewCommand\"), dot-maker will create the Command and output a success message: Created Command: /path/to/project/src/ExistingModule/src/Command/NewCommand.php","title":"Name the Command"},{"location":"v1/component/command/#create-multiple-commands","text":"To allow the creation of multiple Commands, the process will loop until you leave the name blank. Each iteration creates a new Command under the same module.","title":"Create multiple Commands"},{"location":"v1/component/entity/","text":"Create Entity This page assumes that you have created a Composer \"make\" script as described on the Setup page . Run the command To create an Entity, use either of the following commands: composer make entity OR ./vendor/bin/dot-maker entity Identify the target module dot-maker needs to know in which module you want to create the new Entity. To determine this, it will prompt you to enter the name of an existing module: Existing module name: If you input a module name which does not exist (like, \"NonExistentModule\"), an error will be thrown: Module \"NonExistentModule\" not found and will keep prompting for a valid module name until you provide one. Once an existing module name (like, \"ExistingModule\") is provided, dot-maker will output a success message: Found Module \"ExistingModule\" Name the Entity Once the target module has been identified, you will be prompted to input a name for the Entity: Entity name: The name must contain only letters and numbers. You don't have to append \"Entity\" to the name. It is automatically appended when necessary. See our Naming Standards page for more information. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid Entity name: \".\" If you input the name of an existing Entity (like, \"ExistingEntity\"), an error will be thrown: for projects compatible with the Core architecture: Class \"ExistingEntity\" already exists at /path/to/project/src/Core/src/ExistingModule/src/Entity/ExistingEntity.php for projects which are NOT compatible with the Core architecture: Class \"ExistingEntity\" already exists at /path/to/project/src/ExistingModule/src/Entity/ExistingEntity.php If you input a valid name (like, \"NewEntity\"), dot-maker will create the Entity and output a success message: for projects compatible with the Core architecture: Created Entity: /path/to/project/src/Core/src/ExistingModule/src/Entity/NewEntity.php Created Repository: /path/to/project/src/Core/src/ExistingModule/src/Repository/NewEntityRepository.php for projects which are NOT compatible with the Core architecture: Created Entity: /path/to/project/src/ExistingModule/src/Entity/NewEntity.php Created Repository: /path/to/project/src/ExistingModule/src/Repository/NewEntityRepository.php Create multiple Entities To allow the creation of multiple Entities, the process will loop until you leave the name blank. Each iteration creates a new pair of Entity and Repository under the same module.","title":"Create Entity"},{"location":"v1/component/entity/#create-entity","text":"This page assumes that you have created a Composer \"make\" script as described on the Setup page .","title":"Create Entity"},{"location":"v1/component/entity/#run-the-command","text":"To create an Entity, use either of the following commands: composer make entity OR ./vendor/bin/dot-maker entity","title":"Run the command"},{"location":"v1/component/entity/#identify-the-target-module","text":"dot-maker needs to know in which module you want to create the new Entity. To determine this, it will prompt you to enter the name of an existing module: Existing module name: If you input a module name which does not exist (like, \"NonExistentModule\"), an error will be thrown: Module \"NonExistentModule\" not found and will keep prompting for a valid module name until you provide one. Once an existing module name (like, \"ExistingModule\") is provided, dot-maker will output a success message: Found Module \"ExistingModule\"","title":"Identify the target module"},{"location":"v1/component/entity/#name-the-entity","text":"Once the target module has been identified, you will be prompted to input a name for the Entity: Entity name: The name must contain only letters and numbers. You don't have to append \"Entity\" to the name. It is automatically appended when necessary. See our Naming Standards page for more information. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid Entity name: \".\" If you input the name of an existing Entity (like, \"ExistingEntity\"), an error will be thrown: for projects compatible with the Core architecture: Class \"ExistingEntity\" already exists at /path/to/project/src/Core/src/ExistingModule/src/Entity/ExistingEntity.php for projects which are NOT compatible with the Core architecture: Class \"ExistingEntity\" already exists at /path/to/project/src/ExistingModule/src/Entity/ExistingEntity.php If you input a valid name (like, \"NewEntity\"), dot-maker will create the Entity and output a success message: for projects compatible with the Core architecture: Created Entity: /path/to/project/src/Core/src/ExistingModule/src/Entity/NewEntity.php Created Repository: /path/to/project/src/Core/src/ExistingModule/src/Repository/NewEntityRepository.php for projects which are NOT compatible with the Core architecture: Created Entity: /path/to/project/src/ExistingModule/src/Entity/NewEntity.php Created Repository: /path/to/project/src/ExistingModule/src/Repository/NewEntityRepository.php","title":"Name the Entity"},{"location":"v1/component/entity/#create-multiple-entities","text":"To allow the creation of multiple Entities, the process will loop until you leave the name blank. Each iteration creates a new pair of Entity and Repository under the same module.","title":"Create multiple Entities"},{"location":"v1/component/form/","text":"Create Form This page assumes that you have created a Composer \"make\" script as described on the Setup page . Forms cannot be created in APIs. To create a Form, use either of the following commands: Run the command composer make form OR ./vendor/bin/dot-maker form Identify the target module dot-maker needs to know in which module you want to create the new Form. To determine this, it will prompt you to enter the name of an existing module: Existing module name: If you input a module name which does not exist (like, \"NonExistentModule\"), an error will be thrown: Module \"NonExistentModule\" not found and will keep prompting for a valid module name until you provide one. Once an existing module name (like, \"ExistingModule\") is provided, dot-maker will output a success message: Found Module \"ExistingModule\" Name the Form Once the target module has been identified, you will be prompted to input a name for the Form: Form name: The name must contain only letters and numbers. You don't have to append \"Form\" to the name. It is automatically appended when necessary. See our Naming Standards page for more information. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid Form name: \".\" If you input the name of an existing Form (like, \"ExistingForm\"), an error will be thrown: Class \"ExistingForm\" already exists at /path/to/project/src/ExistingModule/src/Form/ExistingForm.php Once you input a valid name (like, \"Book\"), dot-maker will prompt you to confirm which CRUD operations will be performed on the resource: Create resources The prompt asks you whether you want to create resources: Allow creating Resources? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/ExistingModule/src/Form/CreateBookForm.php src/ExistingModule/src/InputFilter/CreateBookInputFilter.php Without confirmation, the process will skip to the next component. Delete resources The prompt asks you whether you want to delete resources: Allow deleting Resources? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/ExistingModule/src/Form/DeleteBookForm.php src/ExistingModule/src/InputFilter/DeleteBookInputFilter.php src/ExistingModule/src/InputFilter/Input/ConfirmDeleteBookInput.php Without confirmation, the process will skip to the next component. Edit resources The prompt asks you whether you want to edit resources: Allow editing Resources? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/ExistingModule/src/Form/EditBookForm.php src/ExistingModule/src/InputFilter/EditBookInputFilter.php Without confirmation, the process will skip to the next component. Create multiple Forms To allow the creation of multiple Forms, the process will loop until you leave the name blank. Each iteration creates a new set of Forms, InputFilter and Inputs under the same module.","title":"Create Form"},{"location":"v1/component/form/#create-form","text":"This page assumes that you have created a Composer \"make\" script as described on the Setup page . Forms cannot be created in APIs. To create a Form, use either of the following commands:","title":"Create Form"},{"location":"v1/component/form/#run-the-command","text":"composer make form OR ./vendor/bin/dot-maker form","title":"Run the command"},{"location":"v1/component/form/#identify-the-target-module","text":"dot-maker needs to know in which module you want to create the new Form. To determine this, it will prompt you to enter the name of an existing module: Existing module name: If you input a module name which does not exist (like, \"NonExistentModule\"), an error will be thrown: Module \"NonExistentModule\" not found and will keep prompting for a valid module name until you provide one. Once an existing module name (like, \"ExistingModule\") is provided, dot-maker will output a success message: Found Module \"ExistingModule\"","title":"Identify the target module"},{"location":"v1/component/form/#name-the-form","text":"Once the target module has been identified, you will be prompted to input a name for the Form: Form name: The name must contain only letters and numbers. You don't have to append \"Form\" to the name. It is automatically appended when necessary. See our Naming Standards page for more information. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid Form name: \".\" If you input the name of an existing Form (like, \"ExistingForm\"), an error will be thrown: Class \"ExistingForm\" already exists at /path/to/project/src/ExistingModule/src/Form/ExistingForm.php Once you input a valid name (like, \"Book\"), dot-maker will prompt you to confirm which CRUD operations will be performed on the resource:","title":"Name the Form"},{"location":"v1/component/form/#create-multiple-forms","text":"To allow the creation of multiple Forms, the process will loop until you leave the name blank. Each iteration creates a new set of Forms, InputFilter and Inputs under the same module.","title":"Create multiple Forms"},{"location":"v1/component/handler/","text":"Create Handler This page assumes that you have created a Composer \"make\" script as described on the Setup page . dot-maker will look for a matching ServiceInterface in the module (e.g.: BookServiceInterface — BookHandler). If it finds one, it will automatically inject it into the Handler. To create a Handler, use either of the following commands: Run the command composer make handler OR ./vendor/bin/dot-maker handler Identify the target module dot-maker needs to know in which module you want to create the new Handler. To determine this, it will prompt you to enter the name of an existing module: Existing module name: If you input a module name which does not exist (like, \"NonExistentModule\"), an error will be thrown: Module \"NonExistentModule\" not found and will keep prompting for a valid module name until you provide one. Once an existing module name (like, \"ExistingModule\") is provided, dot-maker will output a success message: Found Module \"ExistingModule\" Name the Handler Once the target module has been identified, you will be prompted to input a name for the Handler: Handler name: The name must contain only letters and numbers. You don't have to append \"Handler\" to the name. It is automatically appended when necessary. See our Naming Standards page for more information. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid Handler name: \".\" If you input the name of an existing Handler (like, \"ExistingHandler\"), an error will be thrown: Class \"ExistingHandler\" already exists at /path/to/project/src/ExistingModule/src/Handler/ExistingHandler.php Once you input a valid name (like, \"Book\"), the process will iterate over a list of CRUD operations, asking you to confirm whether the Module needs a request Handler for each operation. API projects List resources The prompt asks you whether you want to list resources: Allow listing Resources? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/ExistingModule/src/Collection/BookCollection.php : describes a resource-specific collection src/ExistingModule/src/Handler/Book/GetBookCollectionHandler.php : handles the resource collection representation The matching Collection and ServiceInterface will be automatically injected into the Handler. Without confirmation, the process will skip to the next component. View resources The prompt asks you whether you want to view resources: Allow viewing Resources? [Y(es)/n(o)]: On confirmation, the process will create the following file: src/ExistingModule/src/Handler/Book/GetBookResourceHandler.php : handles the resource representation The matching ServiceInterface will be automatically injected into the Handler. Without confirmation, the process will skip to the next component. Create resources The prompt asks you whether you want to create resources: Allow creating Resources? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/ExistingModule/src/Handler/Book/PostBookResourceHandler.php : handles the resource creation src/ExistingModule/src/InputFilter/CreateBookInputFilter.php : request payload validators The matching InputFilter and ServiceInterface will be automatically injected into the Handler. Without confirmation, the process will skip to the next component. Delete resources The prompt asks you whether you want to delete resources: Allow deleting Resources? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/ExistingModule/src/Handler/Book/DeleteBookResourceHandler.php : handles the resource deletion The matching ServiceInterface will be automatically injected into the Handler. Without confirmation, the process will skip to the next component. Edit resources The prompt asks you whether you want to edit resources: Allow editing Resources? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/ExistingModule/src/Handler/Book/PatchBookResourceHandler.php : handles the resource update src/ExistingModule/src/InputFilter/EditBookInputFilter.php : request payload validators The matching InputFilter and ServiceInterface will be automatically injected into the Handler. Without confirmation, the process will skip to the next component. Replace resources The prompt asks you whether you want to replace resources: Allow replacing Resources? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/ExistingModule/src/Handler/Book/PutBookResourceHandler.php : handles the resource replacement src/ExistingModule/src/InputFilter/ReplaceBookInputFilter.php : request payload validators The matching InputFilter and ServiceInterface will be automatically injected into the Handler. Without confirmation, the process will skip to the next component. Non-API projects List resources The prompt asks you whether you want to list resources: Allow listing Resources? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/ExistingModule/src/Handler/Book/GetBookListHandler.php : renders the resource list page src/ExistingModule/templates/existing-module/book-list.html.twig : renders the resource list The matching ServiceInterface will be automatically injected into the Handler. Without confirmation, the process will skip to the next component. View resources The prompt asks you whether you want to view resources: Allow viewing Resources? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/ExistingModule/src/Handler/Book/GetBookViewHandler.php : renders the resource page src/ExistingModule/templates/existing-module/book-view.html.twig : renders the resource The matching ServiceInterface will be automatically injected into the Handler. Without confirmation, the process will skip to the next component. Create resources The prompt asks you whether you want to create resources: Allow creating Resources? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/ExistingModule/src/Handler/Book/GetBookCreateFormHandler.php : renders the resource creation form page src/ExistingModule/src/Handler/Book/PostBookCreateHandler.php : handles the resource creation src/ExistingModule/src/Form/CreateBookForm.php : form fields src/ExistingModule/src/InputFilter/CreateBookInputFilter.php : form field validators src/ExistingModule/templates/existing-module/book-view.html.twig : renders the resource creation form The matching Form and ServiceInterface will be automatically injected into the Handler. Without confirmation, the process will skip to the next component. Delete resources The prompt asks you whether you want to delete resources: Allow deleting Resources? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/ExistingModule/src/Handler/Book/GetBookDeleteFormHandler.php : renders the resource deletion form page src/ExistingModule/src/Handler/Book/PostBookDeleteHandler.php : handles the resource deletion src/ExistingModule/src/Form/DeleteBookForm.php : form fields src/ExistingModule/src/InputFilter/DeleteBookInputFilter.php : form field validators src/ExistingModule/src/InputFilter/Input/ConfirmDeleteBookInput.php : checkbox input for deletion confirmation src/ExistingModule/templates/existing-module/book-delete-form.html.twig : renders the resource deletion form The matching ServiceInterface will be automatically injected into the Handler. Without confirmation, the process will skip to the next component. Edit resources The prompt asks you whether you want to edit resources: Allow editing Resources? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/ExistingModule/src/Handler/Book/GetBookEditFormHandler.php : renders the resource edit form page src/ExistingModule/src/Handler/Book/PostBookEditHandler.php : handles the resource update src/ExistingModule/src/Form/EditBookForm.php : form fields src/ExistingModule/src/InputFilter/EditBookInputFilter.php : form field validators src/ExistingModule/templates/existing-module/book-edit-form.html.twig : renders the resource creation form The matching InputFilter and ServiceInterface will be automatically injected into the Handler. Without confirmation, the process will skip to the next component. Create multiple Handlers To allow the creation of multiple Handlers, the process will loop until you leave the name blank. Each iteration creates a new set of Handlers(, Forms), InputFilters and Inputs under the same module.","title":"Create Handler"},{"location":"v1/component/handler/#create-handler","text":"This page assumes that you have created a Composer \"make\" script as described on the Setup page . dot-maker will look for a matching ServiceInterface in the module (e.g.: BookServiceInterface — BookHandler). If it finds one, it will automatically inject it into the Handler. To create a Handler, use either of the following commands:","title":"Create Handler"},{"location":"v1/component/handler/#run-the-command","text":"composer make handler OR ./vendor/bin/dot-maker handler","title":"Run the command"},{"location":"v1/component/handler/#identify-the-target-module","text":"dot-maker needs to know in which module you want to create the new Handler. To determine this, it will prompt you to enter the name of an existing module: Existing module name: If you input a module name which does not exist (like, \"NonExistentModule\"), an error will be thrown: Module \"NonExistentModule\" not found and will keep prompting for a valid module name until you provide one. Once an existing module name (like, \"ExistingModule\") is provided, dot-maker will output a success message: Found Module \"ExistingModule\"","title":"Identify the target module"},{"location":"v1/component/handler/#name-the-handler","text":"Once the target module has been identified, you will be prompted to input a name for the Handler: Handler name: The name must contain only letters and numbers. You don't have to append \"Handler\" to the name. It is automatically appended when necessary. See our Naming Standards page for more information. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid Handler name: \".\" If you input the name of an existing Handler (like, \"ExistingHandler\"), an error will be thrown: Class \"ExistingHandler\" already exists at /path/to/project/src/ExistingModule/src/Handler/ExistingHandler.php Once you input a valid name (like, \"Book\"), the process will iterate over a list of CRUD operations, asking you to confirm whether the Module needs a request Handler for each operation.","title":"Name the Handler"},{"location":"v1/component/handler/#create-multiple-handlers","text":"To allow the creation of multiple Handlers, the process will loop until you leave the name blank. Each iteration creates a new set of Handlers(, Forms), InputFilters and Inputs under the same module.","title":"Create multiple Handlers"},{"location":"v1/component/input-filter/","text":"Create InputFilter This page assumes that you have created a Composer \"make\" script as described on the Setup page . To create an InputFilter, use either of the following commands: Run the command composer make input-filter OR ./vendor/bin/dot-maker input-filter Identify the target module dot-maker needs to know in which module you want to create the new InputFilter. To determine this, it will prompt you to enter the name of an existing module: Existing module name: If you input a module name which does not exist (like, \"NonExistentModule\"), an error will be thrown: Module \"NonExistentModule\" not found and will keep prompting for a valid module name until you provide one. Once an existing module name (like, \"ExistingModule\") is provided, dot-maker will output a success message: Found Module \"ExistingModule\" Name the InputFilter Once the target module has been identified, you will be prompted to input a name for the InputFilter: InputFilter name: The name must contain only letters and numbers. You don't have to append \"InputFilter\" to the name. It is automatically appended when necessary. See our Naming Standards page for more information. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid InputFilter name: \".\" If you input the name of an existing InputFilter (like, \"ExistingInputFilter\"), an error will be thrown: Class \"ExistingInputFilter\" already exists at /path/to/project/src/ExistingModule/src/InputFilter/ExistingInputFilter.php Once you input a valid name (like, \"Book\"), dot-maker will prompt you to confirm which CRUD operations will be performed on the resource: Create resources The prompt asks you whether you want to create resources: Allow creating Resources? [Y(es)/n(o)]: On confirmation, the process will create the following file: src/ExistingModule/src/InputFilter/CreateBookInputFilter.php Without confirmation, the process will skip to the next component. Delete resources The prompt asks you whether you want to delete resources: Allow deleting Resources? [Y(es)/n(o)]: On confirmation, the process will create the following file: src/ExistingModule/src/InputFilter/DeleteBookInputFilter.php Without confirmation, the process will skip to the next component. Edit resources The prompt asks you whether you want to edit resources: Allow editing Resources? [Y(es)/n(o)]: On confirmation, the process will create the following file: src/ExistingModule/src/InputFilter/EditBookInputFilter.php Without confirmation, the process will skip to the next component. Replace resources This file is created only when the project type is API. The prompt asks you whether you want to replace resources: Allow replacing Resources? [Y(es)/n(o)]: On confirmation, the process will create the following file: src/ExistingModule/src/InputFilter/ReplaceBookInputFilter.php Without confirmation, the process will skip to the next component. Create multiple InputFilters To allow the creation of multiple InputFilters, the process will loop until you leave the name blank. Each iteration creates a new set of InputFilters under the same module.","title":"Create InputFilter"},{"location":"v1/component/input-filter/#create-inputfilter","text":"This page assumes that you have created a Composer \"make\" script as described on the Setup page . To create an InputFilter, use either of the following commands:","title":"Create InputFilter"},{"location":"v1/component/input-filter/#run-the-command","text":"composer make input-filter OR ./vendor/bin/dot-maker input-filter","title":"Run the command"},{"location":"v1/component/input-filter/#identify-the-target-module","text":"dot-maker needs to know in which module you want to create the new InputFilter. To determine this, it will prompt you to enter the name of an existing module: Existing module name: If you input a module name which does not exist (like, \"NonExistentModule\"), an error will be thrown: Module \"NonExistentModule\" not found and will keep prompting for a valid module name until you provide one. Once an existing module name (like, \"ExistingModule\") is provided, dot-maker will output a success message: Found Module \"ExistingModule\"","title":"Identify the target module"},{"location":"v1/component/input-filter/#name-the-inputfilter","text":"Once the target module has been identified, you will be prompted to input a name for the InputFilter: InputFilter name: The name must contain only letters and numbers. You don't have to append \"InputFilter\" to the name. It is automatically appended when necessary. See our Naming Standards page for more information. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid InputFilter name: \".\" If you input the name of an existing InputFilter (like, \"ExistingInputFilter\"), an error will be thrown: Class \"ExistingInputFilter\" already exists at /path/to/project/src/ExistingModule/src/InputFilter/ExistingInputFilter.php Once you input a valid name (like, \"Book\"), dot-maker will prompt you to confirm which CRUD operations will be performed on the resource:","title":"Name the InputFilter"},{"location":"v1/component/input-filter/#create-multiple-inputfilters","text":"To allow the creation of multiple InputFilters, the process will loop until you leave the name blank. Each iteration creates a new set of InputFilters under the same module.","title":"Create multiple InputFilters"},{"location":"v1/component/input/","text":"Create Input This page assumes that you have created a Composer \"make\" script as described on the Setup page . To create an Input, use either of the following commands: Run the command composer make input OR ./vendor/bin/dot-maker input Identify the target module dot-maker needs to know in which module you want to create the new Input. To determine this, it will prompt you to enter the name of an existing module: Existing module name: If you input a module name which does not exist (like, \"NonExistentModule\"), an error will be thrown: Module \"NonExistentModule\" not found and will keep prompting for a valid module name until you provide one. Once an existing module name (like, \"ExistingModule\") is provided, dot-maker will output a success message: Found Module \"ExistingModule\" Name the Input Once the target module has been identified, you will be prompted to input a name for the Input: Input name: The name must contain only letters and numbers. You don't have to append \"Input\" to the name. It is automatically appended when necessary. See our Naming Standards page for more information. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid Input name: \".\" If you input the name of an existing Input (like, \"ExistingInput\"), an error will be thrown: Class \"ExistingInput\" already exists at /path/to/project/src/ExistingModule/src/InputFilter/Input/ExistingInput.php If you input a valid name (like, \"NewInput\"), dot-maker will create the Input and output a success message: Created Input: /path/to/project/src/ExistingModule/src/InputFilter/Input/NewInput.php Create multiple Inputs To allow the creation of multiple Inputs, the process will loop until you leave the name blank. Each iteration creates a new Input under the same module.","title":"Create Input"},{"location":"v1/component/input/#create-input","text":"This page assumes that you have created a Composer \"make\" script as described on the Setup page . To create an Input, use either of the following commands:","title":"Create Input"},{"location":"v1/component/input/#run-the-command","text":"composer make input OR ./vendor/bin/dot-maker input","title":"Run the command"},{"location":"v1/component/input/#identify-the-target-module","text":"dot-maker needs to know in which module you want to create the new Input. To determine this, it will prompt you to enter the name of an existing module: Existing module name: If you input a module name which does not exist (like, \"NonExistentModule\"), an error will be thrown: Module \"NonExistentModule\" not found and will keep prompting for a valid module name until you provide one. Once an existing module name (like, \"ExistingModule\") is provided, dot-maker will output a success message: Found Module \"ExistingModule\"","title":"Identify the target module"},{"location":"v1/component/input/#name-the-input","text":"Once the target module has been identified, you will be prompted to input a name for the Input: Input name: The name must contain only letters and numbers. You don't have to append \"Input\" to the name. It is automatically appended when necessary. See our Naming Standards page for more information. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid Input name: \".\" If you input the name of an existing Input (like, \"ExistingInput\"), an error will be thrown: Class \"ExistingInput\" already exists at /path/to/project/src/ExistingModule/src/InputFilter/Input/ExistingInput.php If you input a valid name (like, \"NewInput\"), dot-maker will create the Input and output a success message: Created Input: /path/to/project/src/ExistingModule/src/InputFilter/Input/NewInput.php","title":"Name the Input"},{"location":"v1/component/input/#create-multiple-inputs","text":"To allow the creation of multiple Inputs, the process will loop until you leave the name blank. Each iteration creates a new Input under the same module.","title":"Create multiple Inputs"},{"location":"v1/component/middleware/","text":"Create Middleware This page assumes that you have created a Composer \"make\" script as described on the Setup page . To create a Middleware, use either of the following commands: Run the command composer make middleware OR ./vendor/bin/dot-maker middleware Identify the target module dot-maker needs to know in which module you want to create the new Middleware. To determine this, it will prompt you to enter the name of an existing module: Existing module name: If you input a module name which does not exist (like, \"NonExistentModule\"), an error will be thrown: Module \"NonExistentModule\" not found and will keep prompting for a valid module name until you provide one. Once an existing module name (like, \"ExistingModule\") is provided, dot-maker will output a success message: Found Module \"ExistingModule\" Name the Middleware Once the target module has been identified, you will be prompted to input a name for the Middleware: Middleware name: The name must contain only letters and numbers. You don't have to append \"Middleware\" to the name. It is automatically appended when necessary. See our Naming Standards page for more information. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid Middleware name: \".\" If you input the name of an existing Middleware (like, \"ExistingMiddleware\"), an error will be thrown: Class \"ExistingMiddleware\" already exists at /path/to/project/src/ExistingModule/src/Middleware/ExistingMiddleware.php If you input a valid name (like, \"NewMiddleware\"), dot-maker will create the Middleware and output a success message: Created Middleware: /path/to/project/src/ExistingModule/src/Middleware/NewMiddleware.php Create multiple Middleware To allow the creation of multiple Middleware, the process will loop until you leave the name blank. Each iteration creates a new Middleware under the same module.","title":"Create Middleware"},{"location":"v1/component/middleware/#create-middleware","text":"This page assumes that you have created a Composer \"make\" script as described on the Setup page . To create a Middleware, use either of the following commands:","title":"Create Middleware"},{"location":"v1/component/middleware/#run-the-command","text":"composer make middleware OR ./vendor/bin/dot-maker middleware","title":"Run the command"},{"location":"v1/component/middleware/#identify-the-target-module","text":"dot-maker needs to know in which module you want to create the new Middleware. To determine this, it will prompt you to enter the name of an existing module: Existing module name: If you input a module name which does not exist (like, \"NonExistentModule\"), an error will be thrown: Module \"NonExistentModule\" not found and will keep prompting for a valid module name until you provide one. Once an existing module name (like, \"ExistingModule\") is provided, dot-maker will output a success message: Found Module \"ExistingModule\"","title":"Identify the target module"},{"location":"v1/component/middleware/#name-the-middleware","text":"Once the target module has been identified, you will be prompted to input a name for the Middleware: Middleware name: The name must contain only letters and numbers. You don't have to append \"Middleware\" to the name. It is automatically appended when necessary. See our Naming Standards page for more information. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid Middleware name: \".\" If you input the name of an existing Middleware (like, \"ExistingMiddleware\"), an error will be thrown: Class \"ExistingMiddleware\" already exists at /path/to/project/src/ExistingModule/src/Middleware/ExistingMiddleware.php If you input a valid name (like, \"NewMiddleware\"), dot-maker will create the Middleware and output a success message: Created Middleware: /path/to/project/src/ExistingModule/src/Middleware/NewMiddleware.php","title":"Name the Middleware"},{"location":"v1/component/middleware/#create-multiple-middleware","text":"To allow the creation of multiple Middleware, the process will loop until you leave the name blank. Each iteration creates a new Middleware under the same module.","title":"Create multiple Middleware"},{"location":"v1/component/module/","text":"Create Module This page assumes that you have created a Composer \"make\" script as described on the Setup page . To create a Module, use either of the following commands: Run the command composer make module OR ./vendor/bin/dot-maker module Name the Module You will be prompted to input a name for the Module: New module name: The name must contain only letters and numbers. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid Module name: \".\" If you input the name of an existing Module (like, \"ExistingModule\"), an error will be thrown: Module \"ExistingModule\" already exists at /path/to/project/src/ExistingModule If you input a valid name (like, \"NewModule\"), dot-maker will create the Command and output a success message: Created directory: /path/to/project/src/NewModule Create Module files From here, the process will run through a predefined set of files to create the Module components. The process will not ask for file names because they will be generated from the Module name. Entity and Repository Next, you will be asked to confirm whether the Module needs an Entity (and its matching Repository): Create entity and repository? [Y(es)/n(o)]: On confirmation, the process will create the following files: for projects compatible with the Core architecture: src/Core/src/&lt;ModuleName&gt;/src/Entity/&lt;ModuleName&gt;.php src/Core/src/&lt;ModuleName&gt;/src/Repository/&lt;ModuleName&gt;Repository.php for projects which are NOT compatible with the Core architecture: src/&lt;ModuleName&gt;/src/Entity/&lt;ModuleName&gt;.php src/&lt;ModuleName&gt;/src/Repository/&lt;ModuleName&gt;Repository.php Without confirmation, the process will skip to the next component. Service and ServiceInterface Next, you will be asked to confirm whether the Module needs a Service (and its matching ServiceInterface): Create service and service interface? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/&lt;ModuleName&gt;/src/Service/&lt;ModuleName&gt;Service.php src/&lt;ModuleName&gt;/src/Service/&lt;ModuleName&gt;ServiceInterface.php If, at the previous step, you chose to create a Repository, it will be automatically injected into the Service. Also, some common methods will be added to the Service and the ServiceInterface. Without confirmation, the process will skip to the next component. Command Next, you will be asked to confirm whether the Module needs a Command: Create command? [Y(es)/n(o)]: On confirmation, the process will create the following file: src/&lt;ModuleName&gt;/src/Command/&lt;ModuleName&gt;Command.php Without confirmation, the process will skip to the next component. Middleware Next, you will be asked to confirm whether the Module needs a Middleware: Create middleware? [Y(es)/n(o)]: On confirmation, the process will create the following file: src/&lt;ModuleName&gt;/src/Middleware/&lt;ModuleName&gt;Middleware.php If, previously you chose to create a ServiceInterface, it will be automatically injected into the Middleware. Without confirmation, the process will skip to the next component. Handler Next, you will be asked to confirm whether the Module needs request Handlers: Create handler? [Y(es)/n(o)]: On confirmation, depending on the project type, the process will iterate over a list of CRUD operations, asking you to confirm whether the Module needs a request Handler for each operation. API projects List resources The prompt asks you whether you want to list resources: Allow listing Resources? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/&lt;ModuleName&gt;/src/Collection/&lt;ModuleName&gt;Collection.php : describes a resource-specific collection src/&lt;ModuleName&gt;/src/Handler/&lt;ModuleName&gt;/Get&lt;ModuleName&gt;CollectionHandler.php : handles the resource collection representation The matching Collection and ServiceInterface will be automatically injected into the Handler. Without confirmation, the process will skip to the next component. View resources The prompt asks you whether you want to view resources: Allow viewing Resources? [Y(es)/n(o)]: On confirmation, the process will create the following file: src/&lt;ModuleName&gt;/src/Handler/&lt;ModuleName&gt;/Get&lt;ModuleName&gt;ResourceHandler.php : handles the resource representation The matching ServiceInterface will be automatically injected into the Handler. Without confirmation, the process will skip to the next component. Create resources The prompt asks you whether you want to create resources: Allow creating Resources? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/&lt;ModuleName&gt;/src/Handler/&lt;ModuleName&gt;/Post&lt;ModuleName&gt;ResourceHandler.php : handles the resource creation src/&lt;ModuleName&gt;/src/InputFilter/Create&lt;ModuleName&gt;InputFilter.php : request payload validators The matching InputFilter and ServiceInterface will be automatically injected into the Handler. Without confirmation, the process will skip to the next component. Delete resources The prompt asks you whether you want to delete resources: Allow deleting Resources? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/&lt;ModuleName&gt;/src/Handler/&lt;ModuleName&gt;/Delete&lt;ModuleName&gt;ResourceHandler.php : handles the resource deletion The matching ServiceInterface will be automatically injected into the Handler. Without confirmation, the process will skip to the next component. Edit resources The prompt asks you whether you want to edit resources: Allow editing Resources? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/&lt;ModuleName&gt;/src/Handler/&lt;ModuleName&gt;/Patch&lt;ModuleName&gt;ResourceHandler.php : handles the resource update src/&lt;ModuleName&gt;/src/InputFilter/Edit&lt;ModuleName&gt;InputFilter.php : request payload validators The matching InputFilter and ServiceInterface will be automatically injected into the Handler. Without confirmation, the process will skip to the next component. Replace resources The prompt asks you whether you want to replace resources: Allow replacing Resources? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/&lt;ModuleName&gt;/src/Handler/&lt;ModuleName&gt;/Put&lt;ModuleName&gt;ResourceHandler.php : handles the resource replacement src/&lt;ModuleName&gt;/src/InputFilter/Replace&lt;ModuleName&gt;InputFilter.php : request payload validators The matching InputFilter and ServiceInterface will be automatically injected into the Handler. Without confirmation, the process will skip to the next component. Non-API projects List resources The prompt asks you whether you want to list resources: Allow listing Resources? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/&lt;ModuleName&gt;/src/Handler/&lt;ModuleName&gt;/Get&lt;ModuleName&gt;ListHandler.php : renders the resource list page src/&lt;ModuleName&gt;/templates/&lt;ModuleName&gt;/&lt;ModuleName&gt;-list.html.twig : renders the resource list The matching ServiceInterface will be automatically injected into the Handler. Without confirmation, the process will skip to the next component. View resources The prompt asks you whether you want to view resources: Allow viewing Resources? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/&lt;ModuleName&gt;/src/Handler/&lt;ModuleName&gt;/Get&lt;ModuleName&gt;ViewHandler.php : renders the resource page src/&lt;ModuleName&gt;/templates/&lt;ModuleName&gt;/&lt;ModuleName&gt;-view.html.twig : renders the resource The matching ServiceInterface will be automatically injected into the Handler. Without confirmation, the process will skip to the next component. Create resources The prompt asks you whether you want to create resources: Allow creating Resources? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/&lt;ModuleName&gt;/src/Handler/&lt;ModuleName&gt;/Get&lt;ModuleName&gt;CreateFormHandler.php : renders the resource creation form page src/&lt;ModuleName&gt;/src/Handler/&lt;ModuleName&gt;/Post&lt;ModuleName&gt;CreateHandler.php : handles the resource creation src/&lt;ModuleName&gt;/src/Form/Create&lt;ModuleName&gt;Form.php : form fields src/&lt;ModuleName&gt;/src/InputFilter/Create&lt;ModuleName&gt;InputFilter.php : form field validators src/&lt;ModuleName&gt;/templates/&lt;ModuleName&gt;/&lt;ModuleName&gt;-view.html.twig : renders the resource creation form The matching Form and ServiceInterface will be automatically injected into the Handler. Without confirmation, the process will skip to the next component. Delete resources The prompt asks you whether you want to delete resources: Allow deleting Resources? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/&lt;ModuleName&gt;/src/Handler/&lt;ModuleName&gt;/Get&lt;ModuleName&gt;DeleteFormHandler.php : renders the resource deletion form page src/&lt;ModuleName&gt;/src/Handler/&lt;ModuleName&gt;/Post&lt;ModuleName&gt;DeleteHandler.php : handles the resource deletion src/&lt;ModuleName&gt;/src/Form/Delete&lt;ModuleName&gt;Form.php : form fields src/&lt;ModuleName&gt;/src/InputFilter/Delete&lt;ModuleName&gt;InputFilter.php : form field validators src/&lt;ModuleName&gt;/src/InputFilter/Input/ConfirmDelete&lt;ModuleName&gt;Input.php : checkbox input for deletion confirmation src/&lt;ModuleName&gt;/templates/&lt;ModuleName&gt;/&lt;ModuleName&gt;-delete-form.html.twig : renders the resource deletion form The matching ServiceInterface will be automatically injected into the Handler. Without confirmation, the process will skip to the next component. Edit resources The prompt asks you whether you want to edit resources: Allow editing Resources? [Y(es)/n(o)]: On confirmation, the process will create the following files: src/&lt;ModuleName&gt;/src/Handler/&lt;ModuleName&gt;/Get&lt;ModuleName&gt;EditFormHandler.php : renders the resource edit form page src/&lt;ModuleName&gt;/src/Handler/&lt;ModuleName&gt;/Post&lt;ModuleName&gt;EditHandler.php : handles the resource update src/&lt;ModuleName&gt;/src/Form/Edit&lt;ModuleName&gt;Form.php : form fields src/&lt;ModuleName&gt;/src/InputFilter/Edit&lt;ModuleName&gt;InputFilter.php : form field validators src/&lt;ModuleName&gt;/templates/&lt;ModuleName&gt;/&lt;ModuleName&gt;-edit-form.html.twig : renders the resource creation form The matching InputFilter and ServiceInterface will be automatically injected into the Handler. Without confirmation, the process will skip to the next component. RoutesDelegator This component is created only if you chose to create request Handlers. It is generated automatically and contains the basic CRUD operations based on the selected actions during Handler creation. Location: src/&lt;ModuleName&gt;/src/RoutesDelegator.php OpenAPI This component is created only when a project type is API. It is generated automatically and contains the basic description of the API endpoints found in this Module. Once you extend the entities with additional fields, you will need to update the OpenAPI file manually. Location: src/&lt;ModuleName&gt;/src/RoutesDelegator.php ConfigProvider It is generated automatically and contains all the delegators, factories and service aliases for this Module. Once you add new files that need dependency injection, you will need to update the ConfigProvider manually. Location: src/&lt;ModuleName&gt;/src/ConfigProvider.php Core ConfigProvider This component is created only when a project uses the Core architecture. It is generated automatically and contains all the delegators, factories and service aliases for this Module. Once you add new files that need dependency injection, you will need to update the ConfigProvider manually. Location: src/Core/src/&lt;ModuleName&gt;/src/ConfigProvider.php Templates This file structure is NOT created when the project type is API. Location: src/&lt;ModuleName&gt;/templates/&lt;ModuleName&gt;/*.html.twig Next steps Once the Module is created, dot-maker will display a list of tasks that need to be performed manually: Next steps: =========== - add to config/config.php: &lt;ProjectType&gt;\\&lt;ModuleName&gt;\\ConfigProvider::class, - add to config/config.php: Core\\&lt;ModuleName&gt;\\ConfigProvider::class, - add to config/autoload/cli.global.php under dot_cli.commands: &lt;ProjectType&gt;\\&lt;ModuleName&gt;\\Command\\&lt;ModuleName&gt;Command::getDefaultName() =&gt; &lt;ProjectType&gt;\\&lt;ModuleName&gt;\\Command\\&lt;ModuleName&gt;Command::class, - add to config/pipeline.php: $app-&gt;pipe(&lt;ProjectType&gt;\\&lt;ModuleName&gt;\\Middleware\\&lt;ModuleName&gt;Middleware::class); - add to config/autoload/authorization.global.php (OR config/autoload/authorization-guards.global.php) the routes registered in /path/to/project/src/&lt;ModuleName&gt;/src/RoutesDelegator.php - add to composer.json under autoload.psr-4: \"&lt;ProjectType&gt;\\\\&lt;ModuleName&gt;\\\\\": \"src/&lt;ModuleName&gt;/src/\" - add to composer.json under autoload.psr-4: \"Core\\\\&lt;ModuleName&gt;\\\\\": \"src/Core/src/&lt;ModuleName&gt;/src/\" - dump Composer autoloader by executing this command: composer dump - generate Doctrine migration: php ./vendor/bin/doctrine-migrations diff - Review each new file, verify their contents and start adding logic to them. where &lt;ProjectType&gt; is the project type ( API , Admin , Frontend , Light or Queue ) and &lt;ModuleName&gt; is the name of the Module.","title":"Create Module"},{"location":"v1/component/module/#create-module","text":"This page assumes that you have created a Composer \"make\" script as described on the Setup page . To create a Module, use either of the following commands:","title":"Create Module"},{"location":"v1/component/module/#run-the-command","text":"composer make module OR ./vendor/bin/dot-maker module","title":"Run the command"},{"location":"v1/component/module/#name-the-module","text":"You will be prompted to input a name for the Module: New module name: The name must contain only letters and numbers. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid Module name: \".\" If you input the name of an existing Module (like, \"ExistingModule\"), an error will be thrown: Module \"ExistingModule\" already exists at /path/to/project/src/ExistingModule If you input a valid name (like, \"NewModule\"), dot-maker will create the Command and output a success message: Created directory: /path/to/project/src/NewModule","title":"Name the Module"},{"location":"v1/component/module/#create-module-files","text":"From here, the process will run through a predefined set of files to create the Module components. The process will not ask for file names because they will be generated from the Module name.","title":"Create Module files"},{"location":"v1/component/module/#next-steps","text":"Once the Module is created, dot-maker will display a list of tasks that need to be performed manually: Next steps: =========== - add to config/config.php: &lt;ProjectType&gt;\\&lt;ModuleName&gt;\\ConfigProvider::class, - add to config/config.php: Core\\&lt;ModuleName&gt;\\ConfigProvider::class, - add to config/autoload/cli.global.php under dot_cli.commands: &lt;ProjectType&gt;\\&lt;ModuleName&gt;\\Command\\&lt;ModuleName&gt;Command::getDefaultName() =&gt; &lt;ProjectType&gt;\\&lt;ModuleName&gt;\\Command\\&lt;ModuleName&gt;Command::class, - add to config/pipeline.php: $app-&gt;pipe(&lt;ProjectType&gt;\\&lt;ModuleName&gt;\\Middleware\\&lt;ModuleName&gt;Middleware::class); - add to config/autoload/authorization.global.php (OR config/autoload/authorization-guards.global.php) the routes registered in /path/to/project/src/&lt;ModuleName&gt;/src/RoutesDelegator.php - add to composer.json under autoload.psr-4: \"&lt;ProjectType&gt;\\\\&lt;ModuleName&gt;\\\\\": \"src/&lt;ModuleName&gt;/src/\" - add to composer.json under autoload.psr-4: \"Core\\\\&lt;ModuleName&gt;\\\\\": \"src/Core/src/&lt;ModuleName&gt;/src/\" - dump Composer autoloader by executing this command: composer dump - generate Doctrine migration: php ./vendor/bin/doctrine-migrations diff - Review each new file, verify their contents and start adding logic to them. where &lt;ProjectType&gt; is the project type ( API , Admin , Frontend , Light or Queue ) and &lt;ModuleName&gt; is the name of the Module.","title":"Next steps"},{"location":"v1/component/repository/","text":"Create Repository This page assumes that you have created a Composer \"make\" script as described on the Setup page . Run the command To create a Repository, use either of the following commands: composer make repository OR ./vendor/bin/dot-maker repository Identify the target module dot-maker needs to know in which module you want to create the new Repository. To determine this, it will prompt you to enter the name of an existing module: Existing module name: If you input a module name which does not exist (like, \"NonExistentModule\"), an error will be thrown: Module \"NonExistentModule\" not found and will keep prompting for a valid module name until you provide one. Once an existing module name (like, \"ExistingModule\") is provided, dot-maker will output a success message: Found Module \"ExistingModule\" Name the Repository Once the target module has been identified, you will be prompted to input a name for the Repository: Repository name: The name must contain only letters and numbers. You don't have to append \"Repository\" to the name. It is automatically appended when necessary. See our Naming Standards page for more information. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid Repository name: \".\" If you input the name of an existing Repository (like, \"ExistingRepository\"), an error will be thrown: for projects compatible with the Core architecture: Class \"ExistingRepository\" already exists at /path/to/project/src/Core/src/ExistingModule/src/Repository/ExistingRepository.php for projects which are NOT compatible with the Core architecture: Class \"ExistingRepository\" already exists at /path/to/project/src/ExistingModule/src/Repository/ExistingRepository.php If you input a valid name (like, \"NewRepository\"), dot-maker will create the Repository and output a success message: for projects compatible with the Core architecture: Created Entity: /path/to/project/src/Core/src/ExistingModule/src/Entity/NewEntity.php Created Repository: /path/to/project/src/Core/src/ExistingModule/src/Repository/NewEntityRepository.php for projects which are NOT compatible with the Core architecture: Created Entity: /path/to/project/src/ExistingModule/src/Entity/NewEntity.php Created Repository: /path/to/project/src/ExistingModule/src/Repository/NewEntityRepository.php Create multiple Repositories To allow the creation of multiple Repositories, the process will loop until you leave the name blank. Each iteration creates a new pair of Entity and Repository under the same module.","title":"Create Repository"},{"location":"v1/component/repository/#create-repository","text":"This page assumes that you have created a Composer \"make\" script as described on the Setup page .","title":"Create Repository"},{"location":"v1/component/repository/#run-the-command","text":"To create a Repository, use either of the following commands: composer make repository OR ./vendor/bin/dot-maker repository","title":"Run the command"},{"location":"v1/component/repository/#identify-the-target-module","text":"dot-maker needs to know in which module you want to create the new Repository. To determine this, it will prompt you to enter the name of an existing module: Existing module name: If you input a module name which does not exist (like, \"NonExistentModule\"), an error will be thrown: Module \"NonExistentModule\" not found and will keep prompting for a valid module name until you provide one. Once an existing module name (like, \"ExistingModule\") is provided, dot-maker will output a success message: Found Module \"ExistingModule\"","title":"Identify the target module"},{"location":"v1/component/repository/#name-the-repository","text":"Once the target module has been identified, you will be prompted to input a name for the Repository: Repository name: The name must contain only letters and numbers. You don't have to append \"Repository\" to the name. It is automatically appended when necessary. See our Naming Standards page for more information. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid Repository name: \".\" If you input the name of an existing Repository (like, \"ExistingRepository\"), an error will be thrown: for projects compatible with the Core architecture: Class \"ExistingRepository\" already exists at /path/to/project/src/Core/src/ExistingModule/src/Repository/ExistingRepository.php for projects which are NOT compatible with the Core architecture: Class \"ExistingRepository\" already exists at /path/to/project/src/ExistingModule/src/Repository/ExistingRepository.php If you input a valid name (like, \"NewRepository\"), dot-maker will create the Repository and output a success message: for projects compatible with the Core architecture: Created Entity: /path/to/project/src/Core/src/ExistingModule/src/Entity/NewEntity.php Created Repository: /path/to/project/src/Core/src/ExistingModule/src/Repository/NewEntityRepository.php for projects which are NOT compatible with the Core architecture: Created Entity: /path/to/project/src/ExistingModule/src/Entity/NewEntity.php Created Repository: /path/to/project/src/ExistingModule/src/Repository/NewEntityRepository.php","title":"Name the Repository"},{"location":"v1/component/repository/#create-multiple-repositories","text":"To allow the creation of multiple Repositories, the process will loop until you leave the name blank. Each iteration creates a new pair of Entity and Repository under the same module.","title":"Create multiple Repositories"},{"location":"v1/component/service-interface/","text":"Create ServiceInterface This page assumes that you have created a Composer \"make\" script as described on the Setup page . dot-maker will look for a matching Repository in the module (e.g.: BookRepository — BookService). If it finds one, it will automatically inject it into the Service. Also, some common methods will be added to the Service and the ServiceInterface. Run the command To create a ServiceInterface, use either of the following commands: composer make service-interface OR ./vendor/bin/dot-maker service-interface Identify the target module dot-maker needs to know in which module you want to create the new ServiceInterface. To determine this, it will prompt you to enter the name of an existing module: Existing module name: If you input a module name which does not exist (like, \"NonExistentModule\"), an error will be thrown: Module \"NonExistentModule\" not found and will keep prompting for a valid module name until you provide one. Once an existing module name (like, \"ExistingModule\") is provided, dot-maker will output a success message: Found Module \"ExistingModule\" Name the ServiceInterface Once the target module has been identified, you will be prompted to input a name for the ServiceInterface: ServiceInterface name: The name must contain only letters and numbers. You don't have to append \"ServiceInterface\" to the name. It is automatically appended when necessary. See our Naming Standards page for more information. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid ServiceInterface name: \".\" If you input the name of an existing ServiceInterface (like, \"ExistingServiceInterface\"), an error will be thrown: Class \"ExistingServiceInterface\" already exists at /path/to/project/src/ExistingModule/src/Service/ExistingServiceInterface.php If you input a valid name (like, \"NewServiceInterface\"), dot-maker will create the ServiceInterface and output a success message: Created ServiceInterface: /path/to/project/src/ExistingModule/src/Service/NewServiceInterface.php Created Service: /path/to/project/src/ExistingModule/src/Service/NewService.php Create multiple ServiceInterfaces To allow the creation of multiple ServiceInterfaces, the process will loop until you leave the name blank. Each iteration creates a new pair of Service and ServiceInterface under the same module.","title":"Create ServiceInterface"},{"location":"v1/component/service-interface/#create-serviceinterface","text":"This page assumes that you have created a Composer \"make\" script as described on the Setup page . dot-maker will look for a matching Repository in the module (e.g.: BookRepository — BookService). If it finds one, it will automatically inject it into the Service. Also, some common methods will be added to the Service and the ServiceInterface.","title":"Create ServiceInterface"},{"location":"v1/component/service-interface/#run-the-command","text":"To create a ServiceInterface, use either of the following commands: composer make service-interface OR ./vendor/bin/dot-maker service-interface","title":"Run the command"},{"location":"v1/component/service-interface/#identify-the-target-module","text":"dot-maker needs to know in which module you want to create the new ServiceInterface. To determine this, it will prompt you to enter the name of an existing module: Existing module name: If you input a module name which does not exist (like, \"NonExistentModule\"), an error will be thrown: Module \"NonExistentModule\" not found and will keep prompting for a valid module name until you provide one. Once an existing module name (like, \"ExistingModule\") is provided, dot-maker will output a success message: Found Module \"ExistingModule\"","title":"Identify the target module"},{"location":"v1/component/service-interface/#name-the-serviceinterface","text":"Once the target module has been identified, you will be prompted to input a name for the ServiceInterface: ServiceInterface name: The name must contain only letters and numbers. You don't have to append \"ServiceInterface\" to the name. It is automatically appended when necessary. See our Naming Standards page for more information. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid ServiceInterface name: \".\" If you input the name of an existing ServiceInterface (like, \"ExistingServiceInterface\"), an error will be thrown: Class \"ExistingServiceInterface\" already exists at /path/to/project/src/ExistingModule/src/Service/ExistingServiceInterface.php If you input a valid name (like, \"NewServiceInterface\"), dot-maker will create the ServiceInterface and output a success message: Created ServiceInterface: /path/to/project/src/ExistingModule/src/Service/NewServiceInterface.php Created Service: /path/to/project/src/ExistingModule/src/Service/NewService.php","title":"Name the ServiceInterface"},{"location":"v1/component/service-interface/#create-multiple-serviceinterfaces","text":"To allow the creation of multiple ServiceInterfaces, the process will loop until you leave the name blank. Each iteration creates a new pair of Service and ServiceInterface under the same module.","title":"Create multiple ServiceInterfaces"},{"location":"v1/component/service/","text":"Create Service This page assumes that you have created a Composer \"make\" script as described on the Setup page . dot-maker will look for a matching Repository in the module (e.g.: BookRepository — BookService). If it finds one, it will automatically inject it into the Service. Also, some common methods will be added to the Service and the ServiceInterface. Run the command To create a Service, use either of the following commands: composer make service OR ./vendor/bin/dot-maker service Identify the target module dot-maker needs to know in which module you want to create the new Service. To determine this, it will prompt you to enter the name of an existing module: Existing module name: If you input a module name which does not exist (like, \"NonExistentModule\"), an error will be thrown: Module \"NonExistentModule\" not found and will keep prompting for a valid module name until you provide one. Once an existing module name (like, \"ExistingModule\") is provided, dot-maker will output a success message: Found Module \"ExistingModule\" Name the Service Once the target module has been identified, you will be prompted to input a name for the Service: Service name: The name must contain only letters and numbers. You don't have to append \"Service\" to the name. It is automatically appended when necessary. See our Naming Standards page for more information. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid Service name: \".\" If you input the name of an existing Service (like, \"ExistingService\"), an error will be thrown: Class \"ExistingService\" already exists at /path/to/project/src/ExistingModule/src/Service/ExistingService.php If you input a valid name (like, \"NewService\"), dot-maker will create the Service and output a success message: Created Service: /path/to/project/src/ExistingModule/src/Service/NewService.php Created ServiceInterface: /path/to/project/src/ExistingModule/src/Service/NewServiceInterface.php Create multiple Services To allow the creation of multiple Services, the process will loop until you leave the name blank. Each iteration creates a new pair of Service and ServiceInterface under the same module.","title":"Create Service"},{"location":"v1/component/service/#create-service","text":"This page assumes that you have created a Composer \"make\" script as described on the Setup page . dot-maker will look for a matching Repository in the module (e.g.: BookRepository — BookService). If it finds one, it will automatically inject it into the Service. Also, some common methods will be added to the Service and the ServiceInterface.","title":"Create Service"},{"location":"v1/component/service/#run-the-command","text":"To create a Service, use either of the following commands: composer make service OR ./vendor/bin/dot-maker service","title":"Run the command"},{"location":"v1/component/service/#identify-the-target-module","text":"dot-maker needs to know in which module you want to create the new Service. To determine this, it will prompt you to enter the name of an existing module: Existing module name: If you input a module name which does not exist (like, \"NonExistentModule\"), an error will be thrown: Module \"NonExistentModule\" not found and will keep prompting for a valid module name until you provide one. Once an existing module name (like, \"ExistingModule\") is provided, dot-maker will output a success message: Found Module \"ExistingModule\"","title":"Identify the target module"},{"location":"v1/component/service/#name-the-service","text":"Once the target module has been identified, you will be prompted to input a name for the Service: Service name: The name must contain only letters and numbers. You don't have to append \"Service\" to the name. It is automatically appended when necessary. See our Naming Standards page for more information. If you leave the name blank, the process will exit. If you input an invalid name (like, \".\"), an error will be thrown: Invalid Service name: \".\" If you input the name of an existing Service (like, \"ExistingService\"), an error will be thrown: Class \"ExistingService\" already exists at /path/to/project/src/ExistingModule/src/Service/ExistingService.php If you input a valid name (like, \"NewService\"), dot-maker will create the Service and output a success message: Created Service: /path/to/project/src/ExistingModule/src/Service/NewService.php Created ServiceInterface: /path/to/project/src/ExistingModule/src/Service/NewServiceInterface.php","title":"Name the Service"},{"location":"v1/component/service/#create-multiple-services","text":"To allow the creation of multiple Services, the process will loop until you leave the name blank. Each iteration creates a new pair of Service and ServiceInterface under the same module.","title":"Create multiple Services"},{"location":"v1/io/input/","text":"Input data dot-maker uses two types of input: prompt: where the user has to enter some data and press Enter confirm: where the user has to enter one of the predefined options and/or press Enter Prompt The user is presented with a message, for example: Input file name: and they must enter some data and press Enter . Whether the command accepts blank input depends on the command. Some will accept blank input and exit, others will keep prompting until the user enters some valid data. Confirm Confirmations are case-insensitive, so the user may enter lowercase, uppercase or mixed-case letters. The user is presented with a message, for example: Perform an action? [Y(es)/n(o)]: OR Perform an action? [y(es)/N(o)]: and they must enter one of the predefined options and/or press Enter . The valid options are: y , yes , n , no and blank. If the user enters an invalid value, the command will loop until it receives a valid input. If the user submits a blank input, the default value is used. The default value can be identified by finding the branch starting with a capital letter. So, for [Y(es)/n(o)] the default value is yes and for [y(es)/N(o)] the default value is no .","title":"Input"},{"location":"v1/io/input/#input-data","text":"dot-maker uses two types of input: prompt: where the user has to enter some data and press Enter confirm: where the user has to enter one of the predefined options and/or press Enter","title":"Input data"},{"location":"v1/io/input/#prompt","text":"The user is presented with a message, for example: Input file name: and they must enter some data and press Enter . Whether the command accepts blank input depends on the command. Some will accept blank input and exit, others will keep prompting until the user enters some valid data.","title":"Prompt"},{"location":"v1/io/input/#confirm","text":"Confirmations are case-insensitive, so the user may enter lowercase, uppercase or mixed-case letters. The user is presented with a message, for example: Perform an action? [Y(es)/n(o)]: OR Perform an action? [y(es)/N(o)]: and they must enter one of the predefined options and/or press Enter . The valid options are: y , yes , n , no and blank. If the user enters an invalid value, the command will loop until it receives a valid input. If the user submits a blank input, the default value is used. The default value can be identified by finding the branch starting with a capital letter. So, for [Y(es)/n(o)] the default value is yes and for [y(es)/N(o)] the default value is no .","title":"Confirm"},{"location":"v1/io/output/","text":"Output data dot-maker aims to deliver a simple and intuitive user experience. Each user input can result in one of the following outputs: on success: the message is green and shows what file was created on failure: the message is red and shows what went wrong Debug info On executing a create component command, the first output you will see is related to project detection. The first line is an info message confirming the project type, for example: Detected project type: Api The second line is an info message confirming whether the project uses Core architecture, for example: Core architecture: Yes These are detected by looking at the modules registered in composer.json under autoload . psr-4 .","title":"Output"},{"location":"v1/io/output/#output-data","text":"dot-maker aims to deliver a simple and intuitive user experience. Each user input can result in one of the following outputs: on success: the message is green and shows what file was created on failure: the message is red and shows what went wrong","title":"Output data"},{"location":"v1/io/output/#debug-info","text":"On executing a create component command, the first output you will see is related to project detection. The first line is an info message confirming the project type, for example: Detected project type: Api The second line is an info message confirming whether the project uses Core architecture, for example: Core architecture: Yes These are detected by looking at the modules registered in composer.json under autoload . psr-4 .","title":"Debug info"}]}